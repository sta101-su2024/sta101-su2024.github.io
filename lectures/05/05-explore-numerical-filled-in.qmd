---
title: "Explore numerical data"
editor: visual
---

# Warm up

## Announcements

-   Lab 2 is due Wed, May 22 at 11:59 pm on Gradescope

## Recap from last time

::: task
Suppose you have a data frame called `df` and a single variable in it called `x`. How many variables will `df` have after running the following code?

```{r}
#| eval: false

df |>
  mutate(y = x + 2)
```
:::

. . .

::: task
Suppose you have a data frame called `df` and a single variable in it called `x`. How many variables will `df` have after running the following code?

```{r}
#| eval: false

df <- df |>
  mutate(y = x + 2)
```
:::

. . .

::: task
What is the `<-` operator called and what does it do?
:::

# Exploring (categorical and) numerical data

The main questions we'll explore today are:

-   "What are the demographics and priorities of City of Durham residents?"

-   "How do City of Durham residents feel about quality of services by the city and how, if at all, does that vary by income?"

# Goals

-   Wrapping up discussion on categorical data

-   Visualizing and summarizing numerical data

-   Improving visualizations for visual appeal and better communication

# Packages

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
```

# Data

The data for this case study come from the 2020 Durham City and County Resident Survey.

First, let's load the data:

```{r}
#| label: load-data

durham <- read_csv("durham-2020.csv")
```

Yesterday we manipulated the data a bit.

```{r}
durham <- durham |>
  rename(
    own_rent = do_you_own_or_rent_your_current_resi_31,
    income = would_you_say_your_total_annual_hous_35,
    # a new one
    qos_city = overall_quality_of_services_3_01
  ) |>
  mutate(
    income = as_factor(income),
    own_rent = as_factor(own_rent)
  )
```

# Visualizing relationships between categorical variables

## Exercise 1

Visualize and describe the relationship between income and home ownership of Durham residents.

*Stretch goal:* Customize the colors using named colors from <http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf>.

```{r}
#| label: income-own-rent-plot
#| fig-width: 10
#| fig-asp: 0.4

durham |>
  select(income, own_rent) |>
  drop_na() |>
  ggplot(aes(y = income, fill = own_rent)) +
    geom_bar(position = "fill") +
    scale_y_discrete(
      labels = c(
        "1" = "< $30,000",
        "2" = "$30,000 - $59,999",
        "3" = "$60,000 - $99,999",
        "4" = "$100,000 + "
      )
    ) +
    scale_fill_manual(
      values = c("1" = "cadetblue", "2" = "coral"),
      labels = c( "1" = "Own", "2" = "Rent")
    ) + 
    labs(
      x = "Proportion",
      y = "Would you say your total\n annual household income is...",
      fill = "Do you own\n or rent\n your current\n residence?",
      title = "Income v. home ownership of Durham residents"
    )
  
  

```

## Exercise 2

Calculate the proportions of home owners for each category of Durham residents. Describe the relationship between these two variables, this time with the actual values from the **conditional distribution** of home ownership based on income level.

```{r}
#| label: income-own-rent-props
durham |>
  select(income, own_rent) |>
  drop_na() |>
  count(income, own_rent) |>
  group_by(income) |>
  mutate(prop = n/sum(n))
```

## Exercise 3

Recode the **level**s of these two variables to be more informatively labeled and calculate the proportions from the previous exercise again.

```{r}
#| label: recode-levels

durham <- durham |>
  mutate(
    income_clean = case_when(
      income == "1" ~ "Under $30,000",
      income == "2" ~ "$30,000 - $59,999",
      income == "3" ~ "$60,000 - $99,999",
      income == "4" ~ "$100,000 or more"
    ),
    income_clean = fct_relevel(income_clean, 
                               "Under $30,000",
                               "$30,000 - $59,999",
                               "$60,000 - $99,999",
                               "$100,000 or more"),
    own_rent = if_else(own_rent == 1, "Own", "Rent") 
  )

# quality check
durham|> 
  count(income, income_clean)

# own_rent = case_when(
#  own_rent == 1 ~ "Own",
#  own_rent == 2 ~ "Rent"
# )


durham |>
  select(income_clean, own_rent) |>
  drop_na() |>
  count(income_clean, own_rent) |>
  group_by(income_clean) |>
  mutate(prop = n/sum(n))
```

# Visualizing numerical data

## Exercise 4

One of the questions on the survey is "How satisfied are you with the overall quality of services provided by the city?" A response of 1 indicates Very Dissatisfied and a response of 5 indicates Very Satisfied. The responses for this question are in the variable `qos_city`. This could be considered an ordinal, categorical variable but can also be treated as a numerical variable in an analysis. Let's do the latter!

Visualize and describe the distribution of `qos_city`. If you get a warning with your visualization, comment on what it means.

```{r}
#| label: qos-city-hist
#| fig-asp: 0.618

ggplot(durham, aes(x = qos_city)) + 
  geom_histogram(binwidth =  1) +
  labs(
    x = "Quality of services provided by the city\n 1 - Very Dissatisfied, 5 - Very Satisfied"
  )
```

## Exercise 5

Calculate the mean and median of the distribution of `qos_city`. If these values are not exactly the same, can you explain what the difference might be attributed to?

```{r}
#| label: qos-city-center

durham |>
  summarize(
    mean_qos_city = mean(qos_city, na.rm = TRUE),
    median_qos_city = median(qos_city, na.rm = TRUE)
  )
```

> More rare responses of "1 - Very dissatisfied" pull the mean response down away from the median.

## Exercise 6

Based on the shape of the distribution of `qos_city`, which measure of spread (variability) is more appropriate? Calculate that value and interpret it in context of the data.

```{r}
#| label: qos-city-spread

durham |> 
  summarise(
    iqr_qos_city = IQR(qos_city, na.rm = T),
    q1_qos_city = quantile(qos_city, 0.25, na.rm = T),
    q3_qos_city = quantile(qos_city, 0.75, na.rm = T)
  )
```

## Exercise 7

Make a box plot of `qos_city` and comment on how the values you calculated map on to the box plot.

```{r}
#| label: qos-city-box
#| fig-asp: 0.4
ggplot(durham, aes(x = qos_city)) + 
  geom_boxplot() +
  labs(
    x = "Quality of service provided by the city\n 1 - Very Dissatisfied, 5 - Very Satisfied"
  )
```

## Exercise 8

How the average level of happiness with quality of services provided by the city vary by income group?

*Stretch goal:* Visualize mean `qos_city` by income group.

*Add your response here.*

```{r}
#| label: qos-city-income-mean
#| fig-asp: 0.618

durham |>
  drop_na(income_clean) |>
  group_by(income_clean) |>
  summarize(
    mean_qos_city = mean(qos_city, na.rm = TRUE),
    median_qos_city = median(qos_city, na.rm = TRUE)
  )
```

```{r}
durham |>
  drop_na(income_clean) |>
  group_by(income_clean) |>
  summarize(
    mean_qos_city = mean(qos_city, na.rm = TRUE)
  ) |>
  ggplot(aes(x = income_clean, y = mean_qos_city)) +
  geom_point()
```

# Recap

## Conceptual

Some of the terms we introduced are:

-   **Marginal distribution**: Distribution of a single variable.

-   **Conditional distribution**: Distribution of a variable conditioned on the values (or levels, in the context of categorical data) of another.

## R

In this lecture we:

-   Defined **factor**s -- the data type that R uses for categorical variables, i.e., variables that can take on values from a finite set of **level**s.
-   Reviewed data imports, visualization, and wrangling functions encountered before:
    -   Import: `read_csv()`: Read data from a CSV (comma separated values) file
    -   Visualization:
        -   `ggplot()`: Create a plot using the ggplot2 package
        -   `aes()`: Map variables from the data to **aes**thetic elements of the plot, generally passed as an argument to `ggplot()` or to `geom_*()` functions (define only `x` **or** `y` aesthetic)
        -   `geom_bar()`: Represent data with bars, after calculating heights of bars under the hood
        -   `geom_histogram()`: Represent data with a histogram
        -   `geom_boxplot()`: Represent data with a box plot
        -   `geom_point()`: Represent data with points
        -   `labs()`: Label `x` axis, `y` axis, legend for `color` of plot, title\` of plot, etc.
    -   Wrangling:
        -   `mutate()`: Mutate the data frame by creating a new column or overwriting one of the existing columns
        -   `count()`: Count the number of observations for each level of a categorical variable (factor) or each distinct value of any other type of variable
        -   `group_by()`: Perform each subsequent action once per each group of the variable, where groups can be defined based on the levels of one or more variables
        -   `summarize()`: Calculate summary statistics
-   Introduced new data wrangling functions:
    -   `rename()`: Rename columns in a data frame
    -   `as_factor()`: Convert a variable to a factor
    -   `drop_na()`: Drop rows that have `NA` in one ore more specified variables
    -   `if_else()`: Write logic for what happens if a condition is true and what happens if it's not
    -   `case_when()`: Write a generalized `if_else()` logic for more than one condition
    -   `fct_relevel`: Change the order of levels in a factor
-   Introduced new data visualization functions:
    -   `geom_col()`: Represent data with bars (**col**umns), for heights that have already been calculated (must define `x` **and** `y` aesthetics)
    -   `scale_fill_viridis_d()`: Customize the **d**iscrete `fill` scale, using a color-blind friendly, ordinal **d**iscrete color scale
    -   `scale_y_discrete()`: Customize the discrete `y` scale
    -   `scale_fill_manual()`: Customize the `fill` scale by manually adjusting values for colors

## Quarto

We also introduced chunk options for managing figure sizes:

-   `fig-width`: Width of figure
-   `fig-asp`: Aspect ratio of figure (height / width)
-   `fig-height`: Height of figure -- but I recommend using `fig-width` and `fig-asp`, instead of `fig-width` and `fig-height`

# Acknowledgements

This dataset was cleaned and prepared for analysis by Duke StatSci PhD student [Sam Rosen](https://samgrosen.github.io/).

