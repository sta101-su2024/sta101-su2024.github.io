---
title: "Exam 1 Review"
format:
  html: default
  pdf: default
execute:
  echo: false
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(tidymodels)
library(openintro)
library(scales)
# uncomment the line above if needed
# install.packages("ggmosaic")
library(ggmosaic)
```

```{r}
#| label: blizzard-data-prep

blizzard_salary <- blizzard_salary |>
  mutate(
    annual_salary = case_when(
      salary_type == "week" ~ current_salary * 52,
      salary_type == "hour" ~ current_salary * 40 * 52,
      TRUE ~ current_salary
    ),
    performance_rating = if_else(performance_rating == "Developing", "Poor", performance_rating)
  ) |>
  filter(salary_type != "week") |>
  mutate(
    salary_type = if_else(salary_type == "hour", "Hourly", "Salaried")
  ) |>
  filter(!is.na(annual_salary)) |>
  select(percent_incr, salary_type, annual_salary, performance_rating)
```

In 2020, employees of Blizzard Entertainment circulated a spreadsheet to anonymously share salaries and recent pay increases amidst rising tension in the video game industry over wage disparities and executive compensation. (Source: [Blizzard Workers Share Salaries in Revolt Over Pay](https://www.bloomberg.com/news/articles/2020-08-03/blizzard-workers-share-salaries-in-revolt-over-wage-disparities))

The name of the data frame used for this analysis is `blizzard_salary` and the relevant variables are:

-   `percent_incr`: Raise given in July 2020, as percent increase with values ranging from 1 (1% increase) to 21.5 (21.5% increase)

-   `salary_type`: Type of salary, with levels `Hourly` and `Salaried`

-   `annual_salary`: Annual salary, in USD, with values ranging from \$50,939 to \$216,856.

-   `performance_rating`: Most recent review performance rating, with levels `Poor`, `Successful`, `High`, and `Top`. The `Poor` level is the lowest rating and the `Top` level is the highest rating.

The top six rows of `blizzard_salary` are shown below:

```{r}
blizzard_salary |>
  select(percent_incr, salary_type, annual_salary, performance_rating)
```

## Question 1

How rows observations are there in the `blizzard_salary` dataset and what does each row represent?

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$
:::

## Question 2

@fig-blizzard-hist-1 and @fig-blizzard-hist-2 show the distributions of annual salaries of hourly and salaried workers. The two figures show the same data, with the facets organized across rows and across columns. Which of the two figures is better for comparing the median annual salaries of hourly and salaried workers. Explain your reasoning.

::: {#fig-blizzard-hist}
```{r}
#| label: fig-blizzard-hist-1
#| fig-cap: Option 1
#| fig-width: 10
#| fig-asp: 0.5

ggplot(blizzard_salary, aes(x = annual_salary)) +
  geom_histogram(binwidth = 10000, color = "white") +
  facet_wrap(~salary_type, ncol = 1) +
  scale_x_continuous(labels = label_dollar(scale = 1/1000, suffix = "K"), breaks = seq(0, 250000, 25000)) +
  labs(
    x = "Annual salary (in USD)",
    y = "Count"
  )
```

```{r}
#| label: fig-blizzard-hist-2
#| fig-cap: Option 2
#| fig-width: 10
#| fig-asp: 0.3

ggplot(blizzard_salary, aes(x = annual_salary)) +
  geom_histogram(binwidth = 10000, color = "white") +
  facet_wrap(~salary_type, nrow = 1) +
  scale_x_continuous(labels = label_dollar(scale = 1/1000, suffix = "K"), breaks = seq(0, 250000, 25000)) +
  labs(
    x = "Annual salary (in USD)",
    y = "Count"
  )
```

Distribution of annual salaries of Blizzard employees
:::

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$

{{< pagebreak >}}
:::

## Question 3

Suppose your teammate wrote the following code as part of their analysis of the data.

```{r}
#| label: blizzard-summarize
#| results: false

blizzard_salary |>
  group_by(salary_type) |>
  summarize(
    mean_annual_salary = mean(annual_salary),
    median_annual_salary = median(annual_salary)
  )
```

They then printed out the results shown below. Unfortunately one of the number got erased from the printout, it's indicated with `_____` below.

```         
# A tibble: 2 Ã— 3
  salary_type mean_annual_salary median_annual_salary
  <chr>                    <dbl>                <dbl>
1 Hourly                  63003.               54246.
2 Salaried                90183.               _____
```

Which of the following is the best estimate for that erased value?

a.  30,000
b.  50,000
c.  80,000
d.  100,000

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$

{{< pagebreak >}}
:::

## Question 4

Which distribution has a higher standard deviation?

a.  Hourly workers
b.  Salaried workers
c.  Roughly the same

## Question 5

Which of the following alternate plots would also be useful for visualizing the distributions of annual salaries of hourly and salaried workers?

```         
I.  Box plot
II. Density plot
III. Pie chart
```

a.  I
b.  I and II
c.  I, II, and III
d.  II and III

## Question 6

Next, you fit a model for predicting raises (`percent_incr`) from salaries (`annual_salary`). We'll call this model `raise_1_fit`. A tidy output of the model is shown below.

```{r}
#| label: raise-salary-fit

raise_1_fit <- linear_reg() |>
  fit(percent_incr ~ annual_salary, data = blizzard_salary)

tidy(raise_1_fit)
```

Which of the following is the best interpretation of the slope coefficient?

a.  For every additional \$1,000 of annual salary, the model predicts the raise to be higher, on average, by 1.55%.
b.  For every additional \$1,000 of annual salary, the raise goes up by 0.0155%.
c.  For every additional \$1,000 of annual salary, the model predicts the raise to be higher, on average, by 0.0155%.
d.  For every additional \$1,000 of annual salary, the model predicts the raise to be higher, on average, by 1.87%.

::: {.content-visible when-format="pdf"}
{{< pagebreak >}}
:::

## Question 7

You then fit a model for predicting raises (`percent_incr`) from salaries (`annual_salary`) and performance ratings (`performance_rating`). We'll call this model `raise_2_fit`. Which of the following is definitely true based on the information you have so far?

a.  Intercept of `raise_2_fit` is higher than intercept of `raise_1_fit`.
b.  RMSE of `raise_2_fit` is higher than RMSE of `raise_1_fit`.
c.  Adjusted $R^2$ of `raise_2_fit` is higher than adjusted $R^2$ of `raise_1_fit`.
d.  $R^2$ of `raise_2_fit` is higher $R^2$ of `raise_1_fit`.

## Question 8

The tidy model output for the `raise_2_fit` model you fit is shown below.

```{r}
#| label: raise-salary-rating-fit

raise_2_fit <- linear_reg() |>
  fit(percent_incr ~ annual_salary + performance_rating, data = blizzard_salary)

tidy(raise_2_fit)
```

When your teammate sees this model output, they remark "The coefficient for `performance_ratingSuccessful` is negative, that's weird. I guess it means that people who get successful performance ratings get lower raises." How would you respond to your teammate?

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$

{{< pagebreak >}}
:::

## Question 9

Ultimately, your teammate decides they don't like the negative slope coefficients in the model output you created (not that there's anything wrong with negative slope coefficients!), does something else, and comes up with the following model output.

```{r}
blizzard_salary <- blizzard_salary |>
  mutate(performance_rating = fct_relevel(performance_rating, "Poor", "Successful", "High", "Top"))

raise_2_fit <- linear_reg() |>
  fit(percent_incr ~ annual_salary + performance_rating, data = blizzard_salary)

tidy(raise_2_fit)
```

Unfortunately they didn't write their code in a Quarto document, instead just wrote some code in the Console and then lost track of their work. They remember using the `fct_relevel()` function and doing something like the following:

```{r}
#| eval: false

blizzard_salary <- blizzard_salary |>
  mutate(performance_rating = fct_relevel(performance_rating, ___))
```

What should they put in the blanks to get the same model output as above?

a.  "Poor", "Successful", "High", "Top"
b.  "Successful", "High", "Top"
c.  "Top", "High", "Successful", "Poor"
d.  Poor, Successful, High, Top

::: {.content-visible when-format="pdf"}
{{< pagebreak >}}
:::

## Question 10

Finally, your teammate creates the following two plots and ask you for help deciding which one to use in the final report for visualizing the relationship between performance rating and salary type. In 1-3 sentences, can you help them make a decision, justify your choice, and write the narrative that should go with the plot?

```{r}
#| label: fig-salary-performance-rating
#| layout-ncol: 2
#| fig-cap: Distribution of salary type by performance rating
#| fig-subcap: 
#|   - Option 1
#|   - Option 2

blizzard_salary |>
  drop_na(salary_type, performance_rating) |>
  ggplot(aes(x = salary_type, fill = fct_rev(performance_rating))) +
  geom_bar() +
  scale_fill_viridis_d() +
  labs(
    x = "Salary type",
    y = "Count",
    fill = "Performance\nrating"
  )

blizzard_salary |>
  drop_na(salary_type, performance_rating) |>
  ggplot(aes(x = salary_type, fill = fct_rev(performance_rating))) +
  geom_bar(position = "fill") +
  scale_fill_viridis_d() +
  labs(
    x = "Salary type",
    y = "Proportion",
    fill = "Performance\nrating"
  )
```

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$
:::

## Question 11

A friend with a keen eye points out that the number of observations in @fig-salary-performance-rating-1 seems lower than the total number of observations in `blizzard_salary`. What might be going on here? Explain your reasoning.

::: {.content-visible when-format="pdf"}
{{< pagebreak >}}
:::

## Question 12

Show the proportions of performance ratings for hourly and salaried workers in a table and ask students to place those numbers on the segments of @fig-salary-performance-rating-2.

```{r}
#| label: salary-type-perfecormance-table

blizzard_salary |>
  drop_na(salary_type, performance_rating) |>
  count(salary_type, performance_rating) |>
  pivot_wider(names_from = salary_type, values_from = n, values_fill = 0) |>
  mutate(across(-performance_rating, ~ .x / sum(.x)))
```

## Question 13

Suppose we fit a model to predict `percent_incr` from `annual_salary` and `salary_type`. A tidy output of the model is shown below.

```{r}
#| label: raise-salary-type-fit

raise_3_fit <- linear_reg() |>
  fit(percent_incr ~ annual_salary + salary_type, data = blizzard_salary)

tidy(raise_3_fit)
```

Which of the following visualizations represent this model? Explain your reasoning.

```{r}
#| label: fig-raise-salary-type
#| warning: false
#| layout-ncol: 2
#| fig-cap: |
#|   Visualizations of the relationship between percent increase, annual 
#|   salary, and salary type
#| fig-subcap:
#|   - Option 1
#|   - Option 2
#|   - Option 3
#|   - Option 4

ggplot(blizzard_salary, aes(x = annual_salary, y = percent_incr, color = salary_type)) +
  geom_point(aes(shape = salary_type), alpha = 0.4) +
  geom_smooth(aes(linetype = salary_type), method = "lm", se = FALSE, fullrange = TRUE) +
  labs(
    x = "Annual salary",
    y = "Percent increase",
    color = "Salary type",
    linetype = "Salary type",
    shape = "Salary type"
  ) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent(scale = 1)) +
  theme(legend.position = "top")

ggplot(blizzard_salary, aes(x = annual_salary, y = percent_incr, color = salary_type)) +
  geom_point(aes(shape = salary_type), alpha = 0.4) +
  geom_smooth(aes(linetype = salary_type), se = FALSE, fullrange = TRUE) +
  labs(
    x = "Annual salary",
    y = "Percent increase"
  ) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent(scale = 1)) +
  theme(legend.position = "top")

ggplot(blizzard_salary, aes(x = annual_salary, y = percent_incr, color = salary_type)) +
  geom_point(aes(shape = salary_type), alpha = 0.4, show.legend = FALSE) +
  geom_abline(intercept = 1.24, slope = 0.0000137, color = "#E87d72", linewidth = 1, linetype = "solid") +
  geom_abline(intercept = 1.24+0.913, slope = 0.0000137, color = "#56bcc2", linewidth = 1, linetype = "dashed") +
  labs(
    x = "Annual salary",
    y = "Percent increase",
  ) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent(scale = 1))

ggplot(blizzard_salary, aes(x = annual_salary, y = percent_incr, color = salary_type)) +
  geom_point(alpha = 0.4, show.legend = FALSE) +
  geom_abline(intercept = 1.24, slope = 0.0000137, color = "#56bcc2", linewidth = 1, linetype = "dashed") +
  geom_abline(intercept = 1.24+0.913, slope = 0.0000137,  color = "#E87d72", linewidth = 1) +
  labs(
    x = "Annual salary",
    y = "Percent increase",
  ) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent(scale = 1))
```

::: {.content-visible when-format="pdf"}
{{< pagebreak >}}
:::

## Question 14 

A professor gives a test to 100 students and determines the median score. After grading the test, they realize that the 10 students with the highest scores did exceptionally well. They decide to award these 10 students a bonus of 5 more points. The median of the new score distribution will be \_\_\_\_ the original median.

a.  , depending on skewness, higher or lower than

b.  equal to

c.  lower than

d.  higher than

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$
:::

# Movies

The data for this part comes from the Internet Movie Database (IMDB). Specifically, the data are a random sample of movies that were released between 1980 and 2020.

The name of the data frame used for this analysis is `movies`:

```{r}
#| label: load-data
#| message: false
#| echo: true

movies <- read_csv("movies.csv")
```

It has `{r} nrow(movies)` observations and `{r} ncol(movies)` variables. However, for the in-class part of this exam we'll only work with a subset of these variables:

-   `name`: name of the movie
-   `genre`: main genre of the movie
-   `runtime`: duration of the movie (in minutes)
-   `release_country`: release country
-   `score`: IMDB user rating

Below is a peek at these variables:

```{r}
#| echo: true

movies |>
  select(name, genre, runtime, release_country, score)
```

{{< pagebreak >}}

## Question 15

Suppose we want to modify the `release_country` variable such that the levels are "United States" and "not United States". Fill in the blanks in the code chunk below to accomplish this.

```{r}
    movies <- movies |>
      mutate(release_country = if_else(release_country == "United States", "United States", "not United States"))
```

```{r}
    #| echo: true
    #| eval: false

    movies ____________________ movies |>

      ____________________(
      
        release_country = if_else(
        
          release_country ____________________ United States", 
          
          "____________________", 
          
          "____________________"
        
        )
      )
```

::: {.content-visible when-format="pdf"}
$\vspace{5cm}$
:::


## Question 17 

A  researcher wants to build a multiple linear regression model to predict the `score` of a movie in from `runtime` for the movies in  different types of `genre`.


The total sum of squares for the model $SS_{Total}$ is found to be 0. You know that:

(a) every runtime in every genre had the same amount
(b) every movie had the same `score`
(c) the model perfectly predicts `score` in every movie
(d) the mean `score` must be 0

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$
:::

## Question 17

**Choose the best answer.**

A survey based on a random sample of 2,045 American teenagers found that a 95% confidence interval for the mean number of texts sent per month was (1450, 1550). A valid interpretation of this interval is

a.  95% of all teens who text send between 1450 and 1550 text messages per month.
b.  If a new survey with the same sample size were to be taken, there is a 95% chance that the mean number of texts in the sample would be between 1450 and 1550.
c.  We are 95% confident that the mean number of texts per month of all American teens is between 1450 and 1550.
d.  We are 95% confident that, were we to repeat this survey, the mean number of texts per month of those taking part in the survey would be between 1450 and 1550.

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$
:::


# Premature babies
Suppose you are given a dataset with the following variables:

**Codebook:**

**m_age**

:   Mother's age.

**weeks**

:   Weeks at which the mother gave birth.

**premature**

:   Indicates whether the baby was premature or not.

**weight**

:   Birth weight of the baby (lbs).

**Smoke**

:   Whether or not the mother was a smoker.



## Question 18

Write the theoretical model that regresses `weight` on `m_age`, `weeks`, and `premature`. Be sure to define each term (i.e., $y= -----$).

Then, using the output below, write the fitted model.

```{r, echo=FALSE}
MLRmod <- linear_reg() |>
  fit(weight~m_age+weeks+premature, data=births)

tidy(MLRmod)
```

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$
:::


## Bonus

Pick a concept we introduced in class so far that you've been struggling with and explain it in your own words.

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$
:::
